from fuzzywuzzy import fuzz
import pandas as pd
import numpy as np
import requests
import os
from datetime import datetime

# Set start time
startTime = datetime.now()

# File request
print("Enter Filepath or URL:")
fp = input()
#Cleans up a standard filepath - reverses slashes and removes double quotes
fp = fp.replace("\\","/").replace("\"","").replace("edit?pli=1#gid","export?format=csv&gid").replace("edit#gid","export?format=csv&gid")

# Create dataFrame based on file type
if "xlsx" in fp:
    df = pd.read_excel(fp)
    fty = "xlsx"
elif "docs.google" in fp:
    df = pd.read_csv(fp)
    fty = "sheet"
elif "csv" in fp:
    df = pd.read_csv(fp)
    fty = "csv"
else:
    print("Invalid File Type")
    
# Create list from new URLs
new_path = df[list(df.columns)[1]].tolist()
# Drop new URL column
df = df.drop(df.columns[1], axis=1)
# Rename first column
df.columns.values[0] = "Current URL"
# Remove empty rows
df = df.dropna()

def leven(x):
  lev_max = []
  for i in range(len(new_path)):    
    Str1 = x
    Str2 = new_path[i]
    l_score = fuzz.ratio(Str1.lower(),Str2.lower())
    lev_max.append(l_score)
  m = max(lev_max)
  pos = [i for i, j in enumerate(lev_max) if j == m]
  max_leven = pos[0]
  return new_path[max_leven]
df['Recommended Destination'] = df[list(df.columns)[0]].apply(leven)

# Adds new column for Levenshtein Distance score
def leven_score(x):
  lev_max = []
  for i in range(len(new_path)):    
    Str1 = x
    Str2 = new_path[i]
    l_score = fuzz.ratio(Str1.lower(),Str2.lower())
    lev_max.append(l_score)
  return(max(lev_max))
df['Match Score'] = df[list(df.columns)[0]].apply(leven_score)

# Sort to bring up lower-chance matches
df = df.sort_values(by=['Match Score'], ascending = True)

print(df)

# How long did the script take to run?
print("\n" + "Time to Run: " + str(datetime.now() - startTime))

# Writes new .csv file
print("\n" + "Export? (y/n)")
exp = input()
if exp == "y":
    if fty == "xlsx":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".xlsx","") + " - " + env + " Recommended Redirects.csv")
        pass
    elif fty == "csv":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".csv","") + " - " + env + " Recommended Redirects.csv")
        pass
    elif fty == "sheet":
        print("\n" + "Enter File Name:")
        fn = input()
        path = os.path.join(os.path.expanduser("~"), "Desktop", fn + " Recommended Redirects.csv")
        df.to_csv(path)
        pass
    else:
        pass
else:
    pass
